{
    "level_range": { "min":0, "max":3 },

    "game_state" : {
        "level" : {
            "type" : "string",
            "description" : "The name of the level in which the event occurred."
        },
        "level_shields" : {
            "type" : "List[string]",
            "description" : "A list of which shields the player had previously earned on the level. Empty for events in the map/main menu."
        }
    },

    "events": {
        "begin_game": {
            "description": "When a new game is started",
            "event_data": {
            }
        },
        "continue_game": {
            "description": "When the player chooses to resume an existing game",
            "event_data": {
            }
        },
        "enter_code": {
            "description": "When the player submits a player ID code, to bring up the 'continue' option",
            "event_data": {
                "code": {
                    "type": "str",
                    "description": "The player ID code the player entered"
                }
            }
        },
        "click_tutorial_next": {
            "description": "When the player clicks the 'next' button in the game intro tutorial",
            "event_data": {
                "tutorial_index": {
                    "type": "int",
                    "description": "The page number of the tutorial the player was at, before clicking the 'next' button."
                },
                "?tutorial_text?": {
                    "type": "str",
                    "description": "The text content the tutorial page the player was at, before clicking the 'next' button."
                }
            }
        },
        "click_tutorial_back": {
            "description": "When the player clicks the 'back' button in the game intro tutorial",
            "event_data": {
                "tutorial_index": {
                    "type": "int",
                    "description": "The page number of the tutorial the player was at, before clicking the 'back' button."
                },
                "?tutorial_text?": {
                    "type": "str",
                    "description": "The text content the tutorial page the player was at, before clicking the 'back' button."
                }
            }
        },
        "select_level": {
            "description": "When the player clicks a level from the main map, which they may then click to play",
            "event_data": {
                "level_name": {
                    "type": "str",
                    "description": "The name of the level selected. Note that the `game_state` will have a `level_name` indicating the event occurred in the map; the `event_data` instance of `level_name` is the name of the level selected."
                },
                "level_shields": {
                    "type": "List[str]",
                    "description": "A list of which shields the player had previously earned on the level."
                }
            }
        },
        "click_display_level_rules": {
            "description": "When the player clicks the button to display the selected level's rules.",
            "event_data": {
                "level_name": {
                    "type": "str",
                    "description": "The name of the level currently selected. Note that the `game_state` will have a `level_name` indicating the event occurred in the map; the `event_data` instance of `level_name` is the name of the level selected."
                }
            }
        },
        "click_level_rules_next": {
            "description": "When the player clicks the 'next' button in the level rules",
            "event_data": {
                "level_name": {
                    "type": "str",
                    "description": "The name of the level currently selected. Note that the `game_state` will have a `level_name` indicating the event occurred in the map; the `event_data` instance of `level_name` is the name of the level selected."
                },
                "rules_index": {
                    "type": "int",
                    "description": "The page number of the rules the player was at, before clicking the 'next' button."
                },
                "?rules_text?": {
                    "type": "str",
                    "description": "The text content the rules page the player was at, before clicking the 'next' button."
                }
            }
        },
        "click_level_rules_back": {
            "description": "When the player clicks the 'back' button in the level rules",
            "event_data": {
                "level_name": {
                    "type": "str",
                    "description": "The name of the level currently selected. Note that the `game_state` will have a `level_name` indicating the event occurred in the map; the `event_data` instance of `level_name` is the name of the level selected."
                },
                "rules_index": {
                    "type": "int",
                    "description": "The page number of the rules the player was at, before clicking the 'back' button."
                },
                "?rules_text?": {
                    "type": "str",
                    "description": "The text content the rules page the player was at, before clicking the 'back' button."
                }
            }
        },
        "click_level_rules_exit": {
            "description": "When the player clicks the 'exit' button in the level",
            "event_data": {
                "level_name": {
                    "type": "str",
                    "description": "The name of the level currently selected. Note that the `game_state` will have a `level_name` indicating the event occurred in the map; the `event_data` instance of `level_name` is the name of the level selected."
                },
                "rules_index": {
                    "type": "int",
                    "description": "The page number of the rules the player was at, before clicking the 'exit' button."
                },
                "?rules_text?": {
                    "type": "str",
                    "description": "The text content the rules page the player was at, before clicking the 'exit' button."
                }
            }
        },
        "click_level_rules_finish": {
            "description": "When the player clicks the button to 'finish' reading the level rules.",
            "event_data": {
                "level_name": {
                    "type": "str",
                    "description": "The name of the level currently selected. Note that the `game_state` will have a `level_name` indicating the event occurred in the map; the `event_data` instance of `level_name` is the name of the level selected."
                }
            }
        },
        "click_level_begin": {
            "description": "When the player clicks the button to enter a level from the 'level selected' screen.",
            "event_data": {
                "level_name": {
                    "type": "str",
                    "description": "The name of the level currently selected. Note that the `game_state` will have a `level_name` indicating the event occurred in the map; the `event_data` instance of `level_name` is the name of the level selected."
                }
            }
        },
        "click_display_level_launch": {
            "TODO": "TODO"
        },
        "click_return_to_map": {
            "description": "When the player is in a level, and clicks the button to return to the map.",
            "event_data": {
            }
        },
        "run_sequence": {
            "description": "When the player clicks the button to run a code block sequence.",
            "event_data": {
                "sequence_elements": {
                    "type": "List[Dict]",
                    "details": {
                        "block_id":"TODO: determine if there is an ID associated with each block",
                        "block_index":"int",
                        "block_type":"enum(TRANSLATE_HORIZONTAL, TRANSLATE_VERTICAL, ROTATE_CW_90, ROTATE_CCW_90, ROTATE_ABOUT_CW_90, ROTATE_ABOUT_CCW_90, REFLECT_ACROSS_X_VAL, REFLECT_ACROSS_Y_VAL, REFLECT_ACROSS_X_AXIS, REFLECT_ACROSS_Y_AXIS)",
                        "loop_subelements":"List[Dict]",
                        "block_params":"Dict[str, int]"
                    },
                    "description": "The name of the level currently selected. Note that the `game_state` will have a `level_name` indicating the event occurred in the map; the `event_data` instance of `level_name` is the name of the level selected."
                }
            }
        },
        "dismiss_sequence_feedback": {
            "description": "When the player clicks to leave the pop-up feedback after running a sequence.",
            "event_data": {
                "TODO" : "TODO"
            }
        },
        "select_new_block": {
            "description": "When the player selects a new block type in the sidebar, which they can then add to the sequence.",
            "event_data": {
                "block_type": {
                    "type" : "enum(TRANSLATE_HORIZONTAL, TRANSLATE_VERTICAL, ROTATE_CW_90, ROTATE_CCW_90, ROTATE_ABOUT_CW_90, ROTATE_ABOUT_CCW_90, REFLECT_ACROSS_X_VAL, REFLECT_ACROSS_Y_VAL, REFLECT_ACROSS_X_AXIS, REFLECT_ACROSS_Y_AXIS)",
                    "description" : "The type of block selected in the sidebar"
                },
                "block_params": {
                    "type" : "Dict[str, int]",
                    "description" : "A mapping of the block parameters to the param values. Varies by block type."
                } 
            }
        },
        "add_new_block": {
            "description": "When the player clicks to add the selected block to the sequence.",
            "event_data": {
                "block_id": "TODO: determine if there is an ID associated with each block",
                "block_index": {
                    "type" : "int",
                    "description" : "The index of the newly-added block within the sequence/loop"
                },
                "in_loop": {
                    "type" : "bool",
                    "description" : "A boolean indicator of whether the block was placed into a loop or not."
                },
                "loop_id":  "TODO: determine if there is an ID associated with each loop block",
                "block_type": {
                    "type" : "enum(TRANSLATE_HORIZONTAL, TRANSLATE_VERTICAL, ROTATE_CW_90, ROTATE_CCW_90, ROTATE_ABOUT_CW_90, ROTATE_ABOUT_CCW_90, REFLECT_ACROSS_X_VAL, REFLECT_ACROSS_Y_VAL, REFLECT_ACROSS_X_AXIS, REFLECT_ACROSS_Y_AXIS)",
                    "description" : "The type of block added to the sequence"
                },
                "block_params": {
                    "type" : "Dict[str, int]",
                    "description" : "A mapping of the block parameters to the param values. Varies by block type."
                } 
            }
        },
        "delete_block": {
            "description": "When the player clicks to remove the selected block from the sequence.",
            "event_data": {
                "block_id": "TODO: determine if there is an ID associated with each block",
                "block_index": {
                    "type" : "int",
                    "description" : "The index of the block within the sequence/loop, before it was removed."
                },
                "in_loop": {
                    "type" : "bool",
                    "description" : "A boolean indicator of whether the block was in a loop or not."
                },
                "loop_id":  "TODO: determine if there is an ID associated with each loop block",
                "block_type": {
                    "type" : "enum(TRANSLATE_HORIZONTAL, TRANSLATE_VERTICAL, ROTATE_CW_90, ROTATE_CCW_90, ROTATE_ABOUT_CW_90, ROTATE_ABOUT_CCW_90, REFLECT_ACROSS_X_VAL, REFLECT_ACROSS_Y_VAL, REFLECT_ACROSS_X_AXIS, REFLECT_ACROSS_Y_AXIS)",
                    "description" : "The type of block that was removed from the sequence"
                },
                "block_params": {
                    "type" : "Dict[str, int]",
                    "description" : "A mapping of the block parameters to the param values. Varies by block type."
                } 
            }
        },
        "drag_block": {
            "description": "When the player clicks and drags a block to a new spot in the sequence.",
            "event_data": {
                "block_id": "TODO: determine if there is an ID associated with each block",
                "old_index": {
                    "type" : "int",
                    "description" : "The index of the block within the sequence/loop, before it was dragged."
                },
                "new_index": {
                    "type" : "int",
                    "description" : "The index of the block within the sequence/loop, after it was dragged and dropped."
                },
                "in_loop": {
                    "type" : "bool",
                    "description" : "A boolean indicator of whether the block is in a loop or not."
                },
                "loop_id":  "TODO: determine if there is an ID associated with each loop block",
                "block_type": {
                    "type" : "enum(TRANSLATE_HORIZONTAL, TRANSLATE_VERTICAL, ROTATE_CW_90, ROTATE_CCW_90, ROTATE_ABOUT_CW_90, ROTATE_ABOUT_CCW_90, REFLECT_ACROSS_X_VAL, REFLECT_ACROSS_Y_VAL, REFLECT_ACROSS_X_AXIS, REFLECT_ACROSS_Y_AXIS)",
                    "description" : "The type of block that was moved within the sequence"
                },
                "block_params": {
                    "type" : "Dict[str, int]",
                    "description" : "A mapping of the block parameters to the param values. Varies by block type."
                } 
            }
        },
        "set_block_parameter": {
            "description": "When the player clicks and drags a block to a new spot in the sequence.",
            "event_data": {
                "block_id": "TODO: determine if there is an ID associated with each block",
                "block_type": {
                    "type" : "enum(TRANSLATE_HORIZONTAL, TRANSLATE_VERTICAL, ROTATE_CW_90, ROTATE_CCW_90, ROTATE_ABOUT_CW_90, ROTATE_ABOUT_CCW_90, REFLECT_ACROSS_X_VAL, REFLECT_ACROSS_Y_VAL, REFLECT_ACROSS_X_AXIS, REFLECT_ACROSS_Y_AXIS)",
                    "description" : "The type of block that was moved within the sequence"
                },
                "changed_param" : {
                    "type" : "str",
                    "description" : "The name of the parameter that was changed."
                },
                "old_value": {
                    "type" : "int",
                    "description" : "The value of the parameter, before it was changed."
                },
                "new_value": {
                    "type" : "int",
                    "description" : "The value of the parameter, after it was changed."
                }
            }
        },
    },

    "features": {
        "per_count": {
        },
        "aggregate":{
        }
    },

    "config": {
    	"SUPPORTED_VERS": [1]
	}
}
