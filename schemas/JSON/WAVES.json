{
    "events":{
        "COMPLETE":{
            "event_custom":"string",
            "amplitude_left":"float",
            "wavelength_left":"float",
            "offset_left":"float",
            "amplitude_right":"float",
            "wavelength_right":"float",
            "offset_right":"float",
            "closeness":"float"
        },
        "SUCCEED":{
            "event_custom":"string",
            "amplitude_left":"float",
            "wavelength_left":"float",
            "offset_left":"float",
            "amplitude_right":"float",
            "wavelength_right":"float",
            "offset_right":"float",
            "closeness":"float"
        },
        "FAIL":{
            "event_custom":"string",
            "amplitude_left":"float",
            "wavelength_left":"float",
            "offset_left":"float",
            "amplitude_right":"float",
            "wavelength_right":"float",
            "offset_right":"float",
            "closeness":"float"
        },
        "RESET_BTN_PRESS":{
            "event_custom":"string",
            "amplitude_left":"float",
            "wavelength_left":"float",
            "offset_left":"float",
            "amplitude_right":"float",
            "wavelength_right":"float",
            "offset_right":"float",
            "closeness":"float"
        },
        "SLIDER_MOVE_RELEASE":{
            "event_custom":"string",
            "slider":{"enum": ["AMPLITUDE", "OFFSET", "WAVELENGTH"]},
            "wave":"string",
            "begin_val":"float",
            "end_val":"float",
            "min_val":"float",
            "max_val":"float",
            "ave_val":"float",
            "begin_closeness":"float",
            "end_closeness":"float",
            "drag_length_ticks":"int",
            "direction_shifts":"int",
            "stdev_val":"float",
            "correct_val":"float"
        },
        "ARROW_MOVE_RELEASE":{
            "event_custom":"string",
            "slider":"string",
            "wave":"string",
            "begin_val":"float",
            "end_val":"float",
            "closeness":"float",
            "correct_val":"float"
        },
        "QUESTION_ANSWER":{
            "event_custom":"string",
            "answer":"int",
            "answered":"int",
            "question":"int"
        },
        "MENU_BUTTON":{
            "event_custom":"string"
        },
        "SKIP_BUTTON":
        {
            "event_custom":"SKIP_BUTTON"
        },
        "DISMISS_MENU_BUTTON":
        {
            "event_custom":"DISMISS_MENU_BUTTON"
        }
    },

    "features": {
        "perlevel":{
            "totalSliderMoves":"slider moves across a given level [count of 'SLIDER_MOVE_RELEASE' events]",
            "totalArrowMoves":"arrow moves across a given level [count of 'ARROW_MOVE_RELEASE' events]",
            "totalLevelTime" : "time spent on a level [sum of differences in time between 'BEGIN' and 'COMPLETE' event(s)]",
            "sliderAvgStdDevs": "Average of stdev_val for all slider moves in a level",
            "totalMoveTypeChanges" : "number of times 'slider' changes across a level",
            "sliderAvgRange" : "difference between max and min values of a slider move, averaged together across a level",
            "totalResets" : "number of times the user pressed the 'reset' button across a level",
            "totalFails" : "number of 'Fail' events across a level",
            "totalSkips" : "number of times the player chose to skip the level (only allowed if they already completed the level once)",
            "menuBtnCount" : "number of times the player returned to the main menu. [count of 'MENU_BUTTON' events]",
            "beginCount" : "number of times a player 'began' the level. [count of 'BEGIN' events]",
            "succeedCount" : "number of times a 'SUCCEED' event occurs. [count of 'SUCCEED' events]",
            "completeCount" : "number of times a player 'completed' the level. [count of 'COMPLETE' events]",
            "completed":"whether the level was completed or not [bool whether 'COMPLETE' event was found]",
            "percentAmplitudeMoves" : "percent of total moves that were amplitude adjustments in a level",
            "percentOffsetMoves" : "percent of total moves that were offset adjustments in a level",
            "percentWavelengthMoves" : "percent of total moves that were wavelength adjustments in a level",
            "amplitudeGoodMoveCount" : "number of amplitude moves that brought amplitude closer to the correct value",
            "offsetGoodMoveCount" : "number of offset moves that brought offset closer to the correct value",
            "wavelengthGoodMoveCount" : "number of wavelength moves that brought wavelength closer to the correct value",
            "percentAmplitudeGoodMoves" : "percent of amplitude moves that brought amplitude closer to the correct value",
            "percentOffsetGoodMoves" : "percent of wavelength moves that brought wavelength closer to the correct value",
            "percentWavelengthGoodMoves" : "percent of wavelength moves that brought wavelength closer to the correct value"
        },
        "per_custom_count": {
            "questionAnswered" : {"count" : 4, "prefix": "QA", "desc" : "The answer the user gave to a given question (or -1 if unanswered)"},
            "questionCorrect"  : {"count" : 4, "prefix": "QA", "desc" : "0 if user answered the question incorrectly, 1 if answered correctly, -1 if unanswered"}
        },

        "aggregate":{
            "sessionID":"The player's session ID number for this play session",
            "persistentSessionID":"The session ID for the player's device, persists across multiple players using the same device.",
            "avgSliderMoves" : "totalSliderMoves averaged over all levels",
            "avgLevelTime" : "totalLevelTime averaged over all levels",
            "avgMoveTypeChanges" : "totalMoveTypeChanges averaged over all levels",
            "overallSliderAvgStdDevs" : "Average standard deviation of slider moves over a whole sessioin",
            "overallSliderAvgRange" : "Average range of slider moves over a whole session",
            "overallPercentAmplitudeMoves" : "Percent of total moves that were amplitude adjustments over a whole session",
            "overallPercentOffsetMoves" : "Percent of total moves that were offset adjustments over a whole session",
            "overallPercentWavelengthMoves" : "Percent of total moves that were wavelength adjustments over a whole session",
            "avgFails" : "totalFails averaged over all levels"
        }
    },

    "db_columns": {
        "id":"Unique identifier for a row",
        "app_id":"A string identifying which game from which the event came",
        "app_id_fast":"A second version of the app id, to be removed",
        "app_version":"The version of the game from which the event came",
        "session_id":"Unique identifier for the gameplay session",
        "persistent_session_id":"Unique identifier across all gameplay sessions from a single computer",
        "level":"The game level in which the event was logged",
        "event":"The type of event logged",
        "event_custom":"A number corresponding to the game-specific event type for events labeled 'Custom'",
        "event_data_simple":"Unused (always=0), to be deleted",
        "event_data_complex":"Data specific to an event type, encoded as a JSON string",
        "client_time":"The client machine time when the event was generated",
        "client_time_ms":"Client time in milliseconds",
        "server_time":"The server machine time when the event was logged",
        "remote_addr":"The IP address for the player's computer",
        "req_id":"Another ID of some kind, to be removed",
        "session_n":"Counter of events in the session, from 0. A row with session_n = i is the (i+1)-th event of the session",
        "http_user_agent":"Data on the type of web browser, OS, etc. in use by the player"
    }
}